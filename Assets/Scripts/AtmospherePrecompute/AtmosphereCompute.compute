// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain_sky
#pragma kernel CSMain_sun

#if defined(UNITY_COLORSPACE_GAMMA)
#define GAMMA 2
#define COLOR_2_GAMMA(color) color
#define COLOR_2_LINEAR(color) color*color
#define LINEAR_2_OUTPUT(color) sqrt(color)
#else
#define GAMMA 2.2
        // HACK: to get gfx-tests in Gamma mode to agree until UNITY_ACTIVE_COLORSPACE_IS_GAMMA is working properly
#define COLOR_2_GAMMA(color) ((unity_ColorSpaceDouble.r>2.0) ? pow(color,1.0/GAMMA) : color)
#define COLOR_2_LINEAR(color) color
#define LINEAR_2_LINEAR(color) color
#endif

        // RGB wavelengths
        // .35 (.62=158), .43 (.68=174), .525 (.75=190)
static const float3 kDefaultScatteringWavelength = float3(.65, .57, .475);
static const float3 kVariableRangeForScatteringWavelength = float3(.15, .15, .15);

#define OUTER_RADIUS 1.025
static const float kOuterRadius = OUTER_RADIUS;
static const float kOuterRadius2 = OUTER_RADIUS * OUTER_RADIUS;
static const float kInnerRadius = 1.0;
static const float kInnerRadius2 = 1.0;

static const float kCameraHeight = 0.0001;

#define kRAYLEIGH (lerp(0.0, 0.0025, pow(_AtmosphereThickness,2.5)))      // Rayleigh constant
#define kMIE 0.0010             // Mie constant
#define kSUN_BRIGHTNESS 20.0    // Sun brightness

#define kMAX_SCATTER 50.0 // Maximum scattering value, to prevent math overflows on Adrenos

static const half kHDSundiskIntensityFactor = 15.0;
static const half kSimpleSundiskIntensityFactor = 27.0;

static const half kSunScale = 400.0 * kSUN_BRIGHTNESS;
static const float kKmESun = kMIE * kSUN_BRIGHTNESS;
static const float kKm4PI = kMIE * 4.0 * 3.14159265;
static const float kScale = 1.0 / (OUTER_RADIUS - 1.0);
static const float kScaleDepth = 0.25;
static const float kScaleOverScaleDepth = (1.0 / (OUTER_RADIUS - 1.0)) / 0.25;
static const float kSamples = 2.0; // THIS IS UNROLLED MANUALLY, DON'T TOUCH

#define MIE_G (-0.990)
#define MIE_G2 0.9801

#define SKY_GROUND_THRESHOLD 0.02
#define SKYBOX_SUNDISK SKYBOX_SUNDISK_HQ
#define PI 3.1415926

half _Exposure; // HDR exposure
half _SunSize;
half _SunSizeConvergence;
half3 _SkyTint;
half _AtmosphereThickness;
half3 _GroundColor;
half3 _WorldSpaceLightPos0;
half4 _LightColor0;
int textureSize;
RWStructuredBuffer<float4> pixelBuffer;

struct appdata
{
    float4 vertex : POSITION;
    float2 uv : TEXCOORD0;
};

struct v2f
{
    float2 uv : TEXCOORD0;
    float3 wpos : TEXCOORD1;
    float4 screenUV : TEXCOORD2;
    float3 ray : TEXCOORD3;
    float4 pos : SV_POSITION;
    half3 skyColor : TEXCOORD4;
    half3 sunColor : TEXCOORD5;
    half3 groundColor : TEXCOORD6;
};

half getRayleighPhase(half eyeCos2)
{
    return 0.75 + 0.75 * eyeCos2;
}
half getRayleighPhase(half3 light, half3 ray)
{
    half eyeCos = dot(light, ray);
    return getRayleighPhase(eyeCos * eyeCos);
}


float scale(float inCos)
{
    float x = 1.0 - inCos;
#if defined(SHADER_API_N3DS)
            // The polynomial expansion here generates too many swizzle instructions for the 3DS vertex assembler
            // Approximate by removing x^1 and x^2
            return 0.25 * exp(-0.00287 + x*x*x*(-6.80 + x*5.25));
#else
    return 0.25 * exp(-0.00287 + x * (0.459 + x * (3.83 + x * (-6.80 + x * 5.25))));
#endif
}

        // Calculates the Mie phase function
half getMiePhase(half eyeCos, half eyeCos2)
{
    half temp = 1.0 + MIE_G2 - 2.0 * MIE_G * eyeCos;
    temp = pow(temp, pow(_SunSize, 0.65) * 10);
    temp = max(temp, 1.0e-4); // prevent division by zero, esp. in half precision
    temp = 1.5 * ((1.0 - MIE_G2) / (2.0 + MIE_G2)) * (1.0 + eyeCos2) / temp;
#if defined(UNITY_COLORSPACE_GAMMA) && SKYBOX_COLOR_IN_TARGET_COLOR_SPACE
                temp = pow(temp, .454545);
#endif
    return temp;
}

        // Calculates the sun shape
half calcSunAttenuation(half3 lightPos, half3 ray)
{

    half focusedEyeCos = pow(saturate(dot(lightPos, ray)), _SunSizeConvergence);
    return getMiePhase(-focusedEyeCos, focusedEyeCos * focusedEyeCos);
}


void vert_bg(float3 ray, inout v2f OUT)
{
    float3 kSkyTintInGammaSpace = (_SkyTint); // convert tint from Linear back to Gamma
    float3 kScatteringWavelength = lerp(
                kDefaultScatteringWavelength - kVariableRangeForScatteringWavelength,
                kDefaultScatteringWavelength + kVariableRangeForScatteringWavelength,
                half3(1, 1, 1) - kSkyTintInGammaSpace); // using Tint in sRGB gamma allows for more visually linear interpolation and to keep (.5) at (128, gray in sRGB) point
    float3 kInvWavelength = 1.0 / pow(kScatteringWavelength, 4);

    float kKrESun = kRAYLEIGH * kSUN_BRIGHTNESS;
    float kKr4PI = kRAYLEIGH * 4.0 * 3.14159265;

    float3 cameraPos = float3(0, kInnerRadius + kCameraHeight, 0); // The camera's current position

            // Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)
    float3 eyeRay = ray; //normalize(mul((float3x3)unity_ObjectToWorld, v.vertex.xyz));
    float far = 0.0;
    half3 cIn, cOut;
            //if(eyeRay.y >= 0.0)
            {
                // Sky
                // Calculate the length of the "atmosphere"
        far = sqrt(kOuterRadius2 + kInnerRadius2 * eyeRay.y * eyeRay.y - kInnerRadius2) - kInnerRadius * eyeRay.y;

        float3 pos = cameraPos + far * eyeRay;

                // Calculate the ray's starting position, then calculate its scattering offset
        float height = kInnerRadius + kCameraHeight;
        float depth = exp(kScaleOverScaleDepth * (-kCameraHeight)); //归一化后的光学厚度
        float startAngle = dot(eyeRay, cameraPos) / height; //除以height用来给camerapos归一化
        float startOffset = depth * scale(startAngle); //通过scale复原归一化，得到原始光学厚度


                // Initialize the scattering loop variables
        float sampleLength = far / kSamples;
        float scaledLength = sampleLength * kScale;
        float3 sampleRay = eyeRay * sampleLength;
        float3 samplePoint = cameraPos + sampleRay * 0.5;

                // Now loop through the sample rays
        float3 frontColor = float3(0.0, 0.0, 0.0);
                // Weird workaround: WP8 and desktop FL_9_3 do not like the for loop here
                // (but an almost identical loop is perfectly fine in the ground calculations below)
                // Just unrolling this manually seems to make everything fine again.
//              for(int i=0; i<int(kSamples); i++)
                {
            float height = length(samplePoint);
            float depth = exp(kScaleOverScaleDepth * (kInnerRadius - height)); //归一化后的光学厚度
            float lightAngle = dot(_WorldSpaceLightPos0.xyz, samplePoint) / height;
            float cameraAngle = dot(eyeRay, samplePoint) / height; //normalize
            float scatter = (startOffset + depth * (scale(lightAngle) - scale(cameraAngle))); //光学厚度
            float3 attenuate = exp(-clamp(scatter, 0.0, kMAX_SCATTER) * (kInvWavelength * kKr4PI + kKm4PI)); //in-scattering width phase

            frontColor += attenuate * (depth * scaledLength);
            samplePoint += sampleRay;
        }
                {
            float height = length(samplePoint);
            float depth = exp(kScaleOverScaleDepth * (kInnerRadius - height));
            float lightAngle = dot(_WorldSpaceLightPos0.xyz, samplePoint) / height;
            float cameraAngle = dot(eyeRay, samplePoint) / height;
            float scatter = (startOffset + depth * (scale(lightAngle) - scale(cameraAngle)));
            float3 attenuate = exp(-clamp(scatter, 0.0, kMAX_SCATTER) * (kInvWavelength * kKr4PI + kKm4PI)); //in-scattering

            frontColor += attenuate * (depth * scaledLength);
            samplePoint += sampleRay;
        }



                // Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader
        cIn = frontColor * (kInvWavelength * kKrESun);
        cOut = frontColor * kKmESun;
    }
 


            // if we want to calculate color in vprog:
            // 1. in case of linear: multiply by _Exposure in here (even in case of lerp it will be common multiplier, so we can skip mul in fshader)
            // 2. in case of gamma and SKYBOX_COLOR_IN_TARGET_COLOR_SPACE: do sqrt right away instead of doing that in fshader

    OUT.skyColor = _Exposure * (cIn * getRayleighPhase(_WorldSpaceLightPos0.xyz, -eyeRay));

            // The sun should have a stable intensity in its course in the sky. Moreover it should match the highlight of a purely specular material.
            // This matching was done using the standard shader BRDF1 on the 5/31/2017
            // Finally we want the sun to be always bright even in LDR thus the normalization of the lightColor for low intensity.
    half lightColorIntensity = clamp(length(_LightColor0.xyz), 0.25, 1);

    OUT.sunColor = kHDSundiskIntensityFactor * saturate(cOut) * _LightColor0.xyz / lightColorIntensity;
#if defined(UNITY_COLORSPACE_GAMMA)
                OUT.skyColor    = sqrt(OUT.skyColor);
                OUT.sunColor= sqrt(OUT.sunColor);
#endif          
}



[numthreads(256, 1, 1)]
void CSMain_sky(uint3 id : SV_DispatchThreadID)
{
    float u = id.x / textureSize;
    float v = id.x % textureSize;

    u /= textureSize; //0-1
    v /= textureSize;
    u *= PI;
    v *= PI; //light angle on hemisphere 0 - pi

    //阳光指向Z轴绕X轴选择采样
    float ly = sin(v);
    float lz = cos(v);
    _WorldSpaceLightPos0 = float3(0, ly, lz);
    
    ly = sin(u);
    lz = cos(u);
    float3 ray = float3(0, ly, lz);
    v2f o = (v2f) 0;
    vert_bg(ray, o);
    pixelBuffer[id.x] = float4(o.skyColor, 1);
}

[numthreads(256, 1, 1)]
void CSMain_sun(uint3 id : SV_DispatchThreadID)
{
    float u = id.x / textureSize;
    float v = id.x % textureSize;

    u /= textureSize; //0-1
    v /= textureSize;
    u *= PI;
    v *= PI; //light angle on hemisphere 0 - pi

    //阳光指向Z轴绕X轴选择采样
    float ly = sin(v);
    float lz = cos(v);
    _WorldSpaceLightPos0 = float3(0, ly, lz);
    
    ly = sin(u);
    lz = cos(u);
    float3 ray = float3(0, ly, lz);
    v2f o = (v2f) 0;
    vert_bg(ray, o);
    pixelBuffer[id.x] = float4(o.sunColor, 1);
}


//single sun angle
[numthreads(256, 1, 1)]
void aCSMain(uint3 id : SV_DispatchThreadID)
{
    float u = id.x / textureSize;
    float v = id.x % textureSize;

    u /= textureSize; //0-1
    v /= textureSize;
    v *= 2 * PI; //0-2pi angle with z axis
    

    float r = sqrt(1 - u * u);
    float x = r * sin(v);
    float z = r * cos(v);
    float3 ray = float3(x, u, z);
    v2f o = (v2f) 0;
    vert_bg(ray, o);
    pixelBuffer[id.x] = float4(o.skyColor, 1);
}

